// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"userprofile/models"
)

// PostUserCreatedCode is the HTTP code returned for type PostUserCreated
const PostUserCreatedCode int = 201

/*
PostUserCreated User created

swagger:response postUserCreated
*/
type PostUserCreated struct {
}

// NewPostUserCreated creates PostUserCreated with default headers values
func NewPostUserCreated() *PostUserCreated {

	return &PostUserCreated{}
}

// WriteResponse to the client
func (o *PostUserCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// PostUserBadRequestCode is the HTTP code returned for type PostUserBadRequest
const PostUserBadRequestCode int = 400

/*
PostUserBadRequest Invalid input

swagger:response postUserBadRequest
*/
type PostUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostUserBadRequest creates PostUserBadRequest with default headers values
func NewPostUserBadRequest() *PostUserBadRequest {

	return &PostUserBadRequest{}
}

// WithPayload adds the payload to the post user bad request response
func (o *PostUserBadRequest) WithPayload(payload *models.ErrorResponse) *PostUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user bad request response
func (o *PostUserBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserUnauthorizedCode is the HTTP code returned for type PostUserUnauthorized
const PostUserUnauthorizedCode int = 401

/*
PostUserUnauthorized Unauthorized

swagger:response postUserUnauthorized
*/
type PostUserUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostUserUnauthorized creates PostUserUnauthorized with default headers values
func NewPostUserUnauthorized() *PostUserUnauthorized {

	return &PostUserUnauthorized{}
}

// WithPayload adds the payload to the post user unauthorized response
func (o *PostUserUnauthorized) WithPayload(payload *models.ErrorResponse) *PostUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user unauthorized response
func (o *PostUserUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserForbiddenCode is the HTTP code returned for type PostUserForbidden
const PostUserForbiddenCode int = 403

/*
PostUserForbidden Forbidden

swagger:response postUserForbidden
*/
type PostUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostUserForbidden creates PostUserForbidden with default headers values
func NewPostUserForbidden() *PostUserForbidden {

	return &PostUserForbidden{}
}

// WithPayload adds the payload to the post user forbidden response
func (o *PostUserForbidden) WithPayload(payload *models.ErrorResponse) *PostUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user forbidden response
func (o *PostUserForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
